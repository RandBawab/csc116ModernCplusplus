#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Lecture 1 csc116
#+CATEGORY: 
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:R               :results output  :colnames yes
#+PROPERTY: header-args:C++             :results output  :flags -std=c++14 -Wall --pedantic -Werror

* What is c++

- Type safe
- Object oriented
- Powerful standard library
  - data types
  - algorithms
- Generic programming


* Simple construcsts

std::vector<type> 
std::string
auto variables

for loops


* Simplest program

#+BEGIN_SRC C++
int main()
{
    return 10;
}
#+END_SRC

#+RESULTS:

#+BEGIN_SRC cmake
cmake_minimum_required(VERSION 3.5.1)
project(simple)

# in case you decide to use gcc
IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_CXX_FLAGS "--std=c++14 -pedantic -Wall -Wextra")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

add_executable(hello hello.cpp)
#+END_SRC

Demo exit code

#+BEGIN_SRC sh
./hello
echo $?
#+END_SRC

* Hello world

#+BEGIN_SRC C++
#include <iostream>

int main()
{
    std::cout << "Hello world " << std::endl;
    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Hello world
#+end_example

* Type safety

#+BEGIN_SRC C++ :results output  :flags -std=c++14 -Wall --pedantic -Werror
#include <iostream>

int main()
{
    int i = 3.5;
    std::cout << "Value of i is " << i << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Value of i is 3
#+end_example

#+BEGIN_SRC C++ :results output  :flags -std=c++14 -Wall --pedantic -Werror
#include <iostream>

int main()
{
    int i {3.5};
    std::cout << "Value of i is " << i << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:

* Arrays

- Show example of array
- Show an example of array out of limits
- Show an example of array size
- Show an example of array size

#+BEGIN_SRC C++ :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};
    std::string hello {"Hello"};
    std::string name {"dmg"};
    std::cout << hello + " " << name << std::endl;
 
    if (name == "dmg") {
        std::cout << "I recognize you, " << name << std::endl;
    }

    for(int i {0};i<5;i++) {
        std::cout << numbers[i] << std::endl;
    }

    return 0;
}
#+END_SRC


#+RESULTS:
#+begin_example
Hello dmg
I recognize you, dmg
1
2
3
4
5
#+end_example

what if we use i < 50



#+BEGIN_SRC C++ :results output  :flags -std=c++14 -Wall --pedantic
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5, 6};
    
    std::cout << "Hello world " << std::endl;

    for(int i;i<numbers.size();i++) {
        std::cout << numbers[i] << std::endl;
    }

    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Hello world 
1
2
3
4
5
6
#+end_example

* Simple sum the values of a vector

#+BEGIN_SRC C++ :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5, 6};

    int sum {0};
    for(int a: numbers) {
        sum += a;
    }
    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 21
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5, 6};

    auto sum {0};
    for(auto a: numbers) {
        sum += a;
    }
    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 21
#+end_example

Generic operations


#+BEGIN_SRC C++ :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <string>
int main()
{
    std::vector<std::string> numbers {"1", "2"};

    std::string sum {};
    for(auto a: numbers) {
        sum += a;
    }
    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 12
#+end_example


#+BEGIN_SRC C++ :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <numeric>
int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5, 6};

    auto sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 21
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <numeric>
#include <complex>
int main()
{
    std::vector<std::complex<int>> numbers {1, 2, 3, 4, 5, 6};

    auto sum = std::accumulate(numbers.begin(), numbers.end(), std::complex<int>{0});

    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is (21,0)
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <numeric>
#include <complex>
int main()
{
    std::vector<std::string> numbers {"1", "2", "3", "4", "5", "6"};

    auto sum = std::accumulate(numbers.begin(), numbers.end(), std::string{});

    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 123456
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++14 :results output
#include <iostream>
#include <map>
#include <string>
#include <vector>
int main()
{
   std::vector<int> numbers {1, 2, 3, 2, 4,1,3,2,4,9,9,9};
   std::map <int, int> frequency {};
   for (auto n : numbers) {
       frequency[n] ++;
   }
   for (auto f : frequency) {
       std::cout << "The frequency of " << f.first << "  is " << f.second << std::endl;
  }
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
The frequency of 1  is 2
The frequency of 2  is 3
The frequency of 3  is 2
The frequency of 4  is 2
The frequency of 9  is 3
#+end_example

