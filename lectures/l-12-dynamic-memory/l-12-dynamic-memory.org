#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Dynamic Memory
#+CATEGORY: 
#+PROPERTY: header-args:sql             :engine postgresql  :exports both :cmdline csc370
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :flags -std=c++14 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output  :colnames yes


* So far in this course:

- Objects are allocated when they are created
  (by their constructors)

- Objects are destroyed by their destructors

** Local variables 
 
 - created when they are declared
 - destroyed when their local ends (block or function)

** Parameters

 - created when the function is called
 - destroyed when the function ends

**  Static variables 

  - are created before their first use
  - they are destroyed when the program ends

** Global variables

 - are created before main is executed
 - they are destroyed after main ends


* So far: Memory management

- All their memory is allocated by the object itself
- e.g.
  - a vector allocates the memory it needs when we declare it and or resize it

- This memory is deallocated by the destructor



* Dynamically allocated objects

- their life time is independent of the scope where they are created
- they exist until they are explicitly deallocated

* Dynamically allocated objects

- They are a *major* source of bugs

* C style memory allocation

- pointers:

#+BEGIN_SRC C++
<type>* pot;
#+END_SRC

- Example:

#+BEGIN_SRC C++
char *ptr;
int *p2;
FILE *file;
#+END_SRC

* C++ memory allocation

Two operations:

- *new*: allocates memory
- *delete*: frees memory


* Managing Memory directly

- This type of memory management is equivalent to that in C
- The programmer must allocate the space pointed by the pointer
- The programmer must deallocate the space pointed by the pointer

* new/delete

- *new* uses a type as its argument. It allocates enough memory for such type
- *delete* releases that memory

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>

int main()
{
   int *pi = new int;
   std::string *pst = new std::string;
   
   *pi = 5;
   std::cout << "Value *pi: " << *pi << std::endl;

   *pst = std::string {"abc"};

   std::cout << "Value *pst: [" << *pst << "]" << std::endl;
  
   auto *parray = new int[10]; // allocate an array of ints

   for(int i=0;i<10;i++) 
       *(parray+1) = i;

   // we can also allocate using a number of bytes

   delete pi;
   delete pst;
   delete parray;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Value *pi: 5
Value *pst: [abc]
#+end_example

* new with initializer:

- Use constructor in the *new*
- even for basic datatypes

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
int main()
{
   int *pi = new int();
   std::string *pst = new std::string();
   
   std::cout << "Value *pi: " << *pi << std::endl;

   std::cout << "Value *pst: [" << *pst << "]" << std::endl;

   delete pi;
   delete pst;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Value *pi: 0
Value *pst: []
#+end_example

* new can infer the type from a variable

#+BEGIN_SRC C++
new auto(var); // allocates memory to point an
               // object of the same type as var
#+END_SRC

Example:

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
int main()
{
   double d {3.5};

   auto *p = new auto(d);
   
   *p = 4;

   std::cout << "Value *p: " << *p << std::endl;

   delete p;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Value *p: 4
#+end_example

* What happens if there is no more memory?

- if not enough memory, *new* throws an exception

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int main()
{
   char *p = new char[10000000000000];

   delete(p);

   return 0;
}

#+END_SRC

Fails with the following exception: 'std::bad_alloc'

#+BEGIN_EXAMPLE
terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
#+END_EXAMPLE

** We can avoid the exception

- but we must check the return value

#+BEGIN_SRC C++
#include <new> 

new (nothrow) <type>;
#+END_SRC

- Null pointer in C++ is *nullptr*
- Equivalent to NULL in C

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <new>  
#include <iostream>
int main()
{
   long long int i = 10000000000000;
  
  std::cout << "Attempting to allocate " << i << " bytes... " ;

   char *p = new (std::nothrow) char[i];

   if (p == nullptr) 
      std::cout << "failure!!!" << std::endl;
   else 
      std::cout << "success." << std::endl;
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Attempting to allocate 10000000000000 bytes... failure!!!
#+end_example

* smart pointers: C++ safer pointers

Two memory management classes in the std

- *std::unique_ptr*: only one pointer can point to the same object
- *std::shared_ptr*: multiple pointers can point to the same object


* std::shared_pointer

- They make memory management much easier 
- and safe
- they should be used instead of bare pointers (direct memory allocation style)
- A *std::shared_pointer* does everything a bare pointer does
  - plus it automatically releases the memory it points to when it is no longer accessible
  - i.e. if there is no *std::shared_pointer* that points to the memory any more
    - memory is *released*
- no need to ever call *delete*

#+BEGIN_SRC C++
std::shared_ptr<std::string> p1; // pointer to string
std::shared_ptr<int> p2;         // pointer to int
std::shared_ptr<std::vector<double>> p3; // points to a vector of double
#+END_SRC

- *the declaration does not necessarily allocate the pointer!*

* constructors of shared_pointer

- it can be initialized to a pointer (nullptr or with new)
- default constructor initializes the shared_pointer to nullptr

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <memory>

int main () 
{
  std::shared_ptr<int> p1;
  std::shared_ptr<int> p2 (new int(20));
  // make p3 point to the same place as p2
  std::shared_ptr<int> p3 (p2);
  std::shared_ptr<int> p4 (nullptr);

  std::cout << "value pointed by p2 " << *p2 << std::endl;
  std::cout << "value pointed by p3 " << *p3 << std::endl;

  // p1 and p4 point to nullptr

}
#+END_SRC

#+RESULTS:
#+begin_example
value pointed by p2 20
value pointed by p3 20
#+end_example

* It is not possible to assign to a shared_pointer

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <memory>
int main()
{
   std::shared_ptr<int> p1;
   
   p1 = new int;
   std::cout << "value pointed by p1 " << *p1 << std::endl;

   return 0;
}

#+END_SRC

- the operator= *is not defined* for the class std::shared_ptr

#+BEGIN_EXAMPLE
/tmp/test.cpp: In function ‘int main()’:
/tmp/test.cpp:10:7: error: no match for ‘operator=’ (operand types are ‘std::shared_ptr<int>’ and ‘int*’)
    p1 = new int;
       ^

#+END_EXAMPLE


* std::make_shared

- To assign to a shared_pointer we must use *std::make_shared*
- it allocates memory for the pointer

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <memory>
#include <string>
#include <vector>
int main()
{
   std::shared_ptr<int> p1;
   
   // allocate memory for p1, set it to value 10
   p1 = std::make_shared<int>(10);

   // create a point to a string
   // initializes with given constructor 
   auto p2 = std::make_shared<std::string>("abc"); 

   std::cout << "value pointed by p1 " << *p1 << std::endl;
   std::cout << "value pointed by p2 " << *p2 << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
value pointed by p1 10
value pointed by p2 abc
#+end_example

* reset

- stops making the shared_ptr point to a given location
- if last shared_ptr, then delete memory

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <memory>
#include <string>
#include <vector>
int main()
{
   std::shared_ptr<int> p1;
   
   // allocate memory for p1, set it to value 10
   p1 = std::make_shared<int>(10);

   // create a point to a string
   // initializes with given constructor 
   std::shared_ptr<int> p2 (p1);
 
   std::cout << "value pointed by p1 " << *p1 << std::endl;
   std::cout << "value pointed by p2 " << *p2 << std::endl;

   p1.reset();
   p2.reset();
   
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
value pointed by p1 10
value pointed by p2 10
#+end_example

* Memory allocated using a smart pointer keeps a counter to the number of smart pointers that point to it


| p.unique() | returns true if pointer has only one instance      |
| p.count()  | returns the number of pointers sharing the pointer |

Example: three pointers pointing to an integer (value 10)

[[./before.png]]


#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <memory>

int main () 
{
  std::shared_ptr<int> p1 (new int);
  // make p2 point to the same place as p1
  std::shared_ptr<int> p2 (p1);
  // make p3 point to the same place as p1
  std::shared_ptr<int> p3 (p1);
  std::shared_ptr<int> p4 (nullptr);

  *p1 = 2;
  std::cout << "value pointed by p1 " << *p1 << std::endl;
  std::cout << "value pointed by p2 " << *p2 << std::endl;
  std::cout << "value pointed by p3 " << *p3 << std::endl;

  std::cout << "count p1 " << p1.use_count() << std::endl;
  std::cout << "count p2 " << p2.use_count() << std::endl;
  std::cout << "count p3 " << p3.use_count() << std::endl;

  std::cout << "Resetting one pointer" << std::endl;

  p1.reset();
  
  std::cout << "count p1 " << p1.use_count() << std::endl;
  std::cout << "count p2 " << p2.use_count() << std::endl;
  std::cout << "count p3 " << p3.use_count() << std::endl;

  std::cout << "Resetting the other two" << std::endl;

  p2.reset();
  p3.reset();

  std::cout << "count p2 " << p2.use_count() << std::endl;
  std::cout << "count p3 " << p3.use_count() << std::endl;


}
#+END_SRC

#+RESULTS:
#+begin_example
value pointed by p1 2
value pointed by p2 2
value pointed by p3 2
count p1 3
count p2 3
count p3 3
Resetting one pointer
count p1 0
count p2 2
count p3 2
Resetting the other two
count p2 0
count p3 0
#+end_example

* reset can also allocate a new pointer

#+BEGIN_SRC C++
std::shared_ptr<int> p1 (new int(10));
std::shared_ptr<int> p2 (p1);
std::shared_ptr<int> p3 (p1);
#+END_SRC

#+RESULTS:

#+begin_src dot :file before.png :cmdline -Tpng :exports none :results silent
digraph { 
         graph [fontname = "Helvetica"]
         rankdir=LR;
         node [shape = rectangle,style=filled];
         
#         2 [style=nonfilled,label="b|count:1",shape=record];
         1 [style=nonfilled,label="10|count:3",shape=record];

         p1 -> 1
         p2 -> 1;
         p3 -> 1;
} 
#+end_src


#+begin_src dot :file before2.png :cmdline -Tpng :exports none :results silent
digraph { 
         graph [fontname = "Helvetica"]
         rankdir=LR;
         node [shape = rectangle,style=filled];
         
         nullptr [color=black,fontcolor=white];

#         2 [style=nonfilled,label="b|count:1",shape=record];
         1 [style=nonfilled,label="10|count:2",shape=record];

         p1 -> nullptr
         p2 -> 1;
         p3 -> 1;
} 
#+end_src

#+BEGIN_SRC C++
p1.reset(new int(20));
#+END_SRC

#+begin_src dot :file before3.png :cmdline -Tpng :exports none :results silent
digraph { 
         graph [fontname = "Helvetica"]
         rankdir=LR;
         node [shape = rectangle,style=filled];
         
         1 [style=nonfilled,label="10|count:2",shape=record];
         2 [style=nonfilled,label="20|count:1",shape=record];
         p1 -> 2;
         p2 -> 1;
         p3 -> 1;
} 
#+end_src

Before: [[./before.png]]  After:   [[./before3.png]]

* Assignment of pointers updates the count of references


#+BEGIN_SRC C++
p2 = p1;
#+END_SRC


#+begin_src dot :file before4.png :cmdline -Tpng :exports none :results silent
digraph { 
         graph [fontname = "Helvetica"]
         rankdir=LR;
         node [shape = rectangle,style=filled];
         
         1 [style=nonfilled,label="10|count:1",shape=record];
         2 [style=nonfilled,label="20|count:2",shape=record];
         p1 -> 2
         p2 -> 2;
         p3 -> 1;

} 
#+end_src

Before:  [[./before3.png]] After:    [[./before4.png]] 

* Automatic deallocation

- when the counter reaches zero, the memory is released
- no need to ever call *delete*
- it guarantees no wasted memory

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int main()
{
   {
      std::shared_ptr<int> p1 (new int);
      // counter to new int is one

      *p1 = 5;
       
   } // at the end of the scope of p1, its memory is automatically released
   // because its counter reaches 0
   // no need to use delete

   return 0;
}

#+END_SRC

* swap

- swap pointers, keeping their counters intact


#+BEGIN_SRC C++
std::swap(p1,p2);
#+END_SRC

equivalent to

#+BEGIN_SRC C++
p1.std::swap(p2);
#+END_SRC

or 

#+BEGIN_SRC C++
p2.std::swap(p1);
#+END_SRC

#+begin_src dot :file before5.png :cmdline -Tpng :exports none :results silent
digraph { 
         graph [fontname = "Helvetica"]
         rankdir=LR;
         node [shape = rectangle,style=filled];
         
#         nullptr [color=black,fontcolor=white];

         2 [style=nonfilled,label="20|count:1",shape=record];
         1 [style=nonfilled,label="10|count:2",shape=record];

         p1 -> 1
         p2 -> 2;
         p3 -> 1;
} 
#+end_src


Before:  [[./before3.png]] After:    [[./before5.png]] 


* How to use the smart pointers

| p       | use as a condition. True if p points to an object         |
| *p      | dereference the pointer                           |
| p.get() | access memory address pointer points to           |

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <memory>

int main () 
{
  std::shared_ptr<int> p0;
  std::shared_ptr<int> p1 (new int);

  if (p0) {
    std::cout << "p0 has been allocated "  << std::endl;
  } else {
    std::cout << "p0 ha NOT been allocated. Pointing to address " << p0.get() << std::endl;
  }  

  if (p1) {
    std::cout << "p1 has been allocated. Pointing to address" << p1.get() << std::endl;
  } else {
    std::cout << "p1 has NOT been allocated " << std::endl;
  }  
}
#+END_SRC

#+RESULTS:
#+begin_example
p0 ha NOT been allocated. Pointing to address 0
p1 has been allocated. Pointing to address0x1e31c20
#+end_example

* std::unique_ptr

- A std::shared_ptr can share the object it points to
- Only one std::unique_ptr can point to an object

** initialization

- No equivalent to make_shared
- instead, use new

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
#include <memory>

int main()
{
   std::unique_ptr<int> p1;
   std::unique_ptr<int> p2(new int(42));
   std::unique_ptr<std::string> p3(new std::string("abc"));
   
   if (p1) {
      std::cout << "p1 has been allocated. Pointing to address" << p1.get() << std::endl;
   } else {
      std::cout << "p1 has NOT been allocated " << std::endl;
   }  
   
   if (p2) {
      std::cout << "p2 has been allocated. Pointing to address " << p2.get() << std::endl;
      std::cout << "   value " << *p2 << std::endl;
   }

   if (p3) {
      std::cout << "p3 has been allocated. Pointing to address " << p3.get() << std::endl;
      std::cout << "   value [" << *p3 << "]" << std::endl;
   } 
   
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
p1 has NOT been allocated 
p2 has been allocated. Pointing to address 0x1014c20
   value 42
p3 has been allocated. Pointing to address 0x1014c40
   value [abc]
#+end_example

** Using std::unique_ptr

- In general, they can be as any other pointer
- but they have some restrictions
  - one cannot copy a smart pointer using =
    - assign = operator does not exist
  - instead, use p.release()

** Copying a pointer: constructor

One way is to copy it at constructor time

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
#include <memory>

int main()
{
   std::unique_ptr<int> p1(new int(42));
   
   if (p1) {
      std::cout << "p1 has been allocated. Pointing to address " << p1.get() << std::endl;
      std::cout << "   value [" << *p1 << "]" << std::endl;
   } 

   // a direct assignment is illegal
   // p2 = p1; 
   // instead use 
   std::cout << "--moving pointer to another one " << std::endl;
   std::unique_ptr<int> p2(p1.release());

   if (!p1) {
      std::cout << "p1 has NOT been allocated. Pointing to address " << p1.get() << std::endl;
   } 

   if (p2) {
      std::cout << "p2 has been allocated. Pointing to address " << p2.get() << std::endl;
      std::cout << "   value [" << *p2 << "]" << std::endl;
   } 

   
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
p1 has been allocated. Pointing to address 0x75cc20
   value [42]
--moving pointer to another one 
p1 has NOT been allocated. Pointing to address 0
p2 has been allocated. Pointing to address 0x75cc20
   value [42]
#+end_example

** Copying a pointer: reset

| q.reset(p.release()) |  moves memory from p to q, set p to nullptr|

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <string>
#include <memory>

int main()
{
   std::unique_ptr<int> p1(new int(42));
   
   if (p1) {
      std::cout << "p1 has been allocated. Pointing to address " << p1.get() << std::endl;
      std::cout << "   value [" << *p1 << "]" << std::endl;
   } 

   std::cout << "--moving pointer to another one " << std::endl;
   std::unique_ptr<int> p2;
   // releases p1 and assigns it to p2
   p2.reset(p1.release());

   if (!p1) {
      std::cout << "p1 has NOT been allocated. Pointing to address " << p1.get() << std::endl;
   } 

   if (p2) {
      std::cout << "p2 has been allocated. Pointing to address " << p2.get() << std::endl;
      std::cout << "   value [" << *p2 << "]" << std::endl;
   } 
   
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
p1 has been allocated. Pointing to address 0x17bfc20
   value [42]
--moving pointer to another one 
p1 has NOT been allocated. Pointing to address 0
p2 has been allocated. Pointing to address 0x17bfc20
   value [42]
#+end_example

** releasing the memory of a std::unique_ptr

use p.reset(nullptr)

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
#include <memory>

int main()
{
   std::unique_ptr<int> p1(new int(42));
   
   if (p1) {
      std::cout << "p1 has been allocated. Pointing to address " << p1.get() << std::endl;
      std::cout << "   value [" << *p1 << "]" << std::endl;
   } 

   std::cout << "--releasing memory " << std::endl;

   p1.reset(nullptr);

   if (!p1) {
      std::cout << "p1 has NOT been allocated. Pointing to address " << p1.get() << std::endl;
   } 

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
p1 has been allocated. Pointing to address 0x1dd1c20
   value [42]
--releasing memory 
p1 has NOT been allocated. Pointing to address 0
#+end_example

Before:  [[./unique.png]]     After: [[./unique2.png]]


#+begin_src dot :file unique.png :cmdline -Tpng :exports none :results silent
digraph { 
         graph [fontname = "Helvetica"]
         rankdir=LR;
         node [shape = rectangle,style=filled];
         
         nullptr [color=white,fontcolor=white];

         2 [style=nonfilled,label="42"];
         p1
         p2 -> nullptr [color=white]

         p1 -> 2
} 
#+end_src


#+begin_src dot :file unique2.png :cmdline -Tpng :exports none :results silent
digraph { 
         graph [fontname = "Helvetica"]
         rankdir=LR;
         node [shape = rectangle,style=filled];
         
         2 [style=nonfilled,label="42"];

         p1 
         p2 -> 2;
} 
#+end_src


