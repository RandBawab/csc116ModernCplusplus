#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Lecture 1 csc116
#+CATEGORY: 
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:R               :results output  :colnames yes
#+PROPERTY: header-args:C++             :results output  :flags -std=c++14 -Wall --pedantic -Werror

* What is c++

- Type safe
- Object oriented
- Powerful standard library
  - data types
  - algorithms
- Generic programming
- Much, much better than C

* The C++ we are going to learn

- Modern C++
- also known as C++ 14 
- Do not waste your time learning older C++


* Simpler constructs than C

| std::vector<type>  |
| std::string        |
| auto variables     |
| improved for loops |


* Learning a language

- Learn the syntax
- Learn the semantics
- Learn the idioms

* Example: 

- count frequency of elements in an "array" (a vector)

#+BEGIN_SRC C++ :main no :flags -std=c++14 :results output
#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <algorithm>

int main()
{
   std::vector<std::string> names {"Canada", "Japan", "Spain", "Japan", "Italy", "Canada", "Japan"};
   std::map <std::string, int> frequency {};
   for (auto n : names) {
       frequency[n] ++;
   }
   for (auto f : frequency) {
       std::cout << "The frequency of " << f.first << " is " << f.second << std::endl;
   }
   std::cout << "--------------------" << std::endl;
   std::for_each(frequency.begin(), 
                 frequency.end(), 
                 [](auto &a){ std::cout << "The frequency of " << a.first << " is " << a.second << std::endl;});
   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
The frequency of Canada is 2
The frequency of Italy is 1
The frequency of Japan is 3
The frequency of Spain is 1
--------------------
The frequency of Canada is 2
The frequency of Italy is 1
The frequency of Japan is 3
The frequency of Spain is 1
#+end_example


* Simplest program

#+BEGIN_SRC C++
int main()
{
    return 10;
}
#+END_SRC

#+RESULTS:

Demo exit code (run in the command line)

#+BEGIN_SRC sh
./hello
echo $?
#+END_SRC

* Hello world

#+BEGIN_SRC C++ :exports both
#include <iostream>

int main()
{
    std::cout << "Hello world 1 " << std::endl;
    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
Hello world 1
#+end_example

* Type safety

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic -Werror
#include <iostream>

int main()
{
    int i { 3};
    std::cout << "Value of i is " << i << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Value of i is 3
#+end_example

This program generates a compilation error

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic -Werror -pedantic-errors
#include <iostream>

int main()
{
    int i {3.5};
    std::cout << "Value of i is " << i << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:

But this one compiles and runs:

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic -Werror -pedantic-errors
#include <iostream>

int main()
{
    int i  = 3.5;
    std::cout << "Value of i is " << i << std::endl;
    return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Value of i is 3
#+end_example


* Vectors not Arrays

- Do not use arrays in C++
- Instead, use a vector

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    for(int i {0};i<5;i++) {
        std::cout << numbers[i] << std::endl;
    }

    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
1
2
3
4
5
#+end_example

* They are safer to use

The following program has a bug:

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    for(int i {1};i<=5;i++) {
        std::cout << numbers[i] << std::endl;
    }

    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
2
3
4
5
0
#+end_example

- For the purpose of this course, never use [] to access elements of an array
- Instead, use .at()

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    for(int i {1};i<=5;i++) {
        std::cout << numbers.at(i) << std::endl;
    }

    return 0;
}
#+END_SRC

#+BEGIN_EXAMPLE
terminate called after throwing an instance of 'std::out_of_range'
  what():  vector::_M_range_check: __n (which is 5) >= this->size() (which is 5)
#+END_EXAMPLE

* But we can do better:


#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    for(int i {0};i<numbers.size();i++) {
        std::cout << numbers.at(i) << std::endl;
    }

    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
1
2
3
4
5
#+end_example

* Nah, these control are obsolete, use an iterator

- after all, control  variables of for loops are a big source of bugs


#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5};

    int sum {};
    for(auto n:numbers) {
        sum += n;
    }
    std::cout << "The sum is "<< sum << std::endl;
    return 0;
}
#+END_SRC

#+RESULTS:
#+begin_example
The sum is 15
#+end_example

* But they also make for very generic code

- We don't have to change the loop, and still works for strings
- see how strings are defined
- note semantics of + when dealing with strings

#+BEGIN_SRC C++ :exports both :results output  :flags -std=c++14 -Wall --pedantic 
#include <iostream>
#include <vector>

int main()
{
    std::vector<std::string> numbers {"1", "2", "3", "4", "5"};

    std::string sum {};
    for(auto n:numbers) {
        sum += n;
    }
    std::cout << "The sum is "<< sum << std::endl;
    return 0;
}
#+END_SRC


#+RESULTS:
#+begin_example
The sum is 12345
#+end_example

- Another example


#+BEGIN_SRC C++ :exports both :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <string>
int main()
{
    std::vector<std::string> numbers {"102", "202"};

    std::string sum {};
    for(auto a: numbers) {
        sum += a;
    }
    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 102202
#+end_example

* C++ also have a large set of "algorithms"

- Why reinvent the wheel? 
- Adding the elements of an array is something that needs to be done frequently
- use std::accumulate

#+BEGIN_SRC C++ :exports both :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <numeric>
int main()
{
    std::vector<int> numbers {1, 2, 3, 4, 5, 6};

    auto sum = std::accumulate(numbers.begin(), numbers.end(), 0);

    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 21
#+end_example

* Algorithms are generic

- What if we want to use complex numbers instead of integers? 
- Let us use complex values:
- Note how the initialization converts an int to a complex. 
- But we can also initialize complex numbers

#+BEGIN_SRC C++ :exports both :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <numeric>
#include <complex>
int main()
{
    std::vector<std::complex<int>> numbers {1, 2, 3, 4, 5, {6,-1}};

    auto sum = std::accumulate(numbers.begin(), numbers.end(), std::complex<int>{0});

    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is (21,-1)
#+end_example

* We can also accumulate strings:

#+BEGIN_SRC C++ :exports both :main no :flags -std=c++14 :results output -Wall -pedantic
#include <iostream>
#include <vector>
#include <numeric>
#include <complex>
int main()
{
    std::vector<std::string> numbers {"1", "2", "3", "4", "5", "6"};

    auto sum = std::accumulate(numbers.begin(), numbers.end(), std::string{});

    std::cout << "the sum of the vector is " << sum << std::endl;
    return 0;

}

#+END_SRC

#+RESULTS:
#+begin_example
the sum of the vector is 123456
#+end_example

* Conclusion

- C++ is much more powerful than C
- Complex semantics (and some extra syntax)
- Lots of powerful data structures 
- Type-safe
- Generic
