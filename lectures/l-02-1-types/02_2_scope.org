#+STARTUP: showall
#+STARTUP: lognotestate
#+TAGS:
#+SEQ_TODO: TODO STARTED DONE DEFERRED CANCELLED | WAITING DELEGATED APPT
#+DRAWERS: HIDDEN STATE
#+TITLE: Variables and Scope
#+CATEGORY: 
#+PROPERTY: header-args: lang           :varname value
#+PROPERTY: header-args:sqlite          :db /path/to/db  :colnames yes
#+PROPERTY: header-args:C++             :results output :exports both :flags -std=c++14 -Wall --pedantic -Werror
#+PROPERTY: header-args:R               :results output :exports both  :colnames yes

* Declaring variables is just like in C

But it can be done anywhere in the code

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int main()
{
   int i={};

   std::cout << i << std::endl;

   int j {5};

   std::cout << j << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
0
5
#+end_example

As in C, variables have scope

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int main()
{
   int i {10};

   std::cout << i << std::endl;
   
   {
      int i {5};
      std::cout << i << std::endl;
      i = 0;
   }
   std::cout << i << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
10
5
10
#+end_example

** The for loop (and other loops) crea their own environment


#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int i=-100;

int main()
{
   std::cout << i << std::endl;
   int i {-5};
   std::cout << i << std::endl;

   for(int i=0;i<3;i++)
      std::cout << i << std::endl;
   
   std::cout << i << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
-100
-5
0
1
2
-5
#+end_example

** A function invocation creates its own environment


#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int i=-100;

void my_function(int j)
{
   std::cout << i << std::endl;
}

int main()
{
   std::cout << i << std::endl;
   int i {-5};
   my_function(i);

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
-100
-100
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>
int i=-100;

void my_function(int i)
{
   i++;
   std::cout << i << std::endl;
}

int main()
{
   std::cout << i << std::endl;
   int i {-5};
   my_function(i);
   std::cout << i << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
-100
-4
-5
#+end_example

#+BEGIN_SRC C++ :main no :flags -std=c++14 -Wall --pedantic -Werror :results output :exports both
#include <iostream>

void my_function(int i)
{
   i++;
   std::cout << "inside " << i << std::endl;
}

int main()
{
   int i {-5};
   std::cout << "Before " << i << std::endl;
   my_function(i);
   std::cout << "After "<< i << std::endl;

   return 0;
}

#+END_SRC

#+RESULTS:
#+begin_example
Before -5
inside -4
After -5
#+end_example


